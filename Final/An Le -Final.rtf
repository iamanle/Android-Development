{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs22 \cf0 //An \ul Le\ulnone \
//CS 646 SDSU\
//Final Project\
//\ul Caro\ulnone  Chess\
\
A chess game that whoever gets 5 of their units (either X or O) in a row first win.\
\
\ul Main Files:\ulnone \
_Single: I implemented a simple algorithm for single player vs Computer. It checks the last move of the player and see if that move creates any row that has at least 3 units. If there is, it blocks 1 end of the row. \
If there is no such move, it attacks by checking its own last move. If there is no best last move, it checks the Empty square around it to move.\
This algorithm is limited as it depends completely on the last move of the player.\
\
_Game: this mode lets 2 users play with each other.\
\
_Cell: this is an abstract class that is used as a prototype for Circle, Cross and Empty class. It extends Point as its parent. Since my strategy is to get width and height of the screen, then take those numbers divide by 20 (number of squares in 1 row or column) for width and height of each square, extending Point is perfect for drawRect of each implemented class.\
\
_MainActivity: it has 2 buttons to call 2 different mode of this game. Game can be resetted by retapping the mode button you want to reset.\
\
}